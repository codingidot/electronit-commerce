# 주문 처리 시스템 설계 보고서

## 1️⃣ 개요
본 시스템은 전자상거래 주문 처리 과정에서 발생할 수 있는 동시성 문제, 외부 API 호출 지연, 트랜잭션 과부하 등을 해결하기 위해 **트랜잭션 분리, 보상 트랜잭션, 이벤트 기반 비동기 처리** 전략을 적용했습니다.

주요 목표:
- 핵심 비즈니스 로직(재고 차감, 결제, 주문 생성)만 트랜잭션 내 처리하여 트랜잭션 시간을 최소화
- 장애 발생 시 데이터 정합성을 보장하기 위한 보상 트랜잭션 적용
- 외부 API 호출이나 후속 처리 로직을 트랜잭션 외부에서 비동기로 처리하여 응답 속도와 안정성 확보

---

## 2️⃣ 설계 특징

### 2.1 트랜잭션 분리
- 핵심 주문 처리(재고 차감, 결제, 주문 생성)만 트랜잭션 범위 내 처리  
- 외부 API 호출이나 캐시 업데이트와 같은 부가 작업은 트랜잭션 외부에서 이벤트 기반으로 처리  
- 트랜잭션 시간이 짧아져 DB 락 유지 시간을 최소화하고, 동시성 처리 성능 향상  

### 2.2 오케스트레이션 패턴 기반 보상 트랜잭션
- 주문 처리 과정에서 단계별 상태(`OrderStep`)를 관리  
- 각 단계에서 예외 발생 시, 이전 단계의 변경사항을 **보상 처리**
  - 재고 차감 완료 후 결제 실패 → 잔액 복구 + 재고 복원  
  - 결제 완료 후 주문 생성 실패 → 결제 취소 + 재고 복원  
- 트랜잭션 단위로 롤백하지 않고, 보상 트랜잭션을 통해 **비즈니스 데이터 정합성 확보**  

### 2.3 이벤트 발행 및 비동기 처리
- 주문 생성 후 `ApplicationEventPublisher`를 사용하여 이벤트 발행  
- 이벤트 핸들러는 트랜잭션 커밋 후(`AFTER_COMMIT`) 실행되므로 외부 API 실패가 트랜잭션에 영향을 주지 않음  
- 이벤트 처리 자체를 `@Async` 또는 메시지 큐 기반으로 비동기 처리 가능
  - 외부 API 호출, 알림 발송, 데이터 플랫폼 전송 등에서 주문 처리 응답 지연 방지  
- 느슨한 결합 구조 설계 및 마이크로서비스 연계에 용이  

### 2.4 분산 락 적용
- `@DistributedLock` 또는 Redisson `MultiLock` 사용하여 동일 상품과 사용자에 대한 동시 접근 방지  
- 재고/결제 데이터의 동시성 안전성 보장  

### 2.5 캐시 업데이트
- 주문 성공 시 Redis ZSet을 이용해 상품별 주문 수 집계  
- TTL 설정을 통해 자동 만료 처리, 최신 데이터 반영 유지  

---

## 3️⃣ 기대 효과

### 3.1 트랜잭션 효율성
- 핵심 로직만 트랜잭션 내 처리 → 트랜잭션 락 유지 시간 단축 → 동시성 처리 성능 향상  

### 3.2 시스템 안정성
- 보상 트랜잭션으로 예외 발생 시 데이터 정합성 보장  
- 외부 API 장애가 주문 트랜잭션에 영향 주지 않음  

### 3.3 확장성
- 이벤트 기반 구조로 마이크로서비스 연계 및 비동기 처리 가능  
- 외부 시스템 연계 및 실시간 데이터 플랫폼 전송에 유연  

### 3.4 동시성 안전성
- 분산 락과 단계별 보상 트랜잭션으로 재고/결제 정합성 유지  
- 대량 주문 처리 시에도 안전하게 동시성 제어 가능  

---

💡 핵심 메시지:  
> 트랜잭션 범위 최소화 + 보상 트랜잭션 + 이벤트 기반 비동기 처리 → 안정적이고 확장 가능한 주문 처리 시스템 구현
